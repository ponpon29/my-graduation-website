<div class="container">
  <h1 class="text-center display-4 fw-bold mb-4">map</h1>
  
  <div class="text-center mb-4">
    <label for="citySelect" class="me-2">駅を選択</label>
    <select id="citySelect" class="form-select d-inline-block w-auto">
      <option value="hakata">博多駅</option>
      <option value="tenjin">西鉄福岡駅</option>
      <option value="kurume">西鉄久留米駅</option>
      <option value="kitakyushu">小倉駅</option>
    </select>
    
    <button id="getCurrentLocationBtn" class="btn-ramen-hover">
      現在地を表示
    </button>
  </div>
  
  <div id="map" class="flex-grow-1"></div>
</div>

<style>
#map {
  height: 700px;
  width: 100%;
}
</style>

<script>
let map;
let currentLocationMarker;
let directionsService;
let directionsRenderer;
const shops = <%= raw @shops.to_json %>;

const cities = {
  hakata: { lat: 33.590188, lng: 130.420685, zoom: 15 },
  tenjin: { lat: 33.5890399, lng: 130.3995899, zoom: 15 },
  kurume: { lat: 33.3122409, lng: 130.5210593, zoom: 15 },
  kitakyushu: { lat: 33.8868979, lng: 130.882544, zoom: 15 }   
};

// 現在地を取得する関数
function getCurrentLocation() {
  return new Promise((resolve, reject) => {
    if (!navigator.geolocation) {
      reject(new Error('位置情報がサポートされていません'));
      return;
    }

    navigator.geolocation.getCurrentPosition(
      (position) => {
        resolve({
          lat: position.coords.latitude,
          lng: position.coords.longitude
        });
      },
      (error) => {
        reject(error);
      },
      {
        enableHighAccuracy: true,
        timeout: 10000,
        maximumAge: 300000
      }
    );
  });
}

// 現在地をマップに表示する関数
async function showCurrentLocation() {
  const btn = document.getElementById('getCurrentLocationBtn');
  btn.textContent = '位置情報取得中...';
  btn.disabled = true;

  try {
    const location = await getCurrentLocation();
    
    if (currentLocationMarker) {
      currentLocationMarker.setMap(null);
    }

    currentLocationMarker = new google.maps.Marker({
      position: location,
      map: map,
      title: '現在地',
      icon: {
        url: 'https://maps.google.com/mapfiles/ms/icons/blue-dot.png',
        scaledSize: new google.maps.Size(40, 40)
      }
    });

    map.setCenter(location);
    map.setZoom(15);

    btn.textContent = '現在地を表示';
    btn.disabled = false;
    
    alert('現在地を取得しました！');
  } catch (error) {
    console.error('位置情報の取得に失敗しました:', error);
    alert('位置情報を取得できませんでした。ブラウザの設定をご確認ください。');
    btn.textContent = '現在地を表示';
    btn.disabled = false;
  }
}

// 店舗への道案内を開始する関数
async function navigateToShop(shop) {
  try {
    const currentLocation = await getCurrentLocation();
    const googleMapsUrl = `https://www.google.com/maps/dir/${currentLocation.lat},${currentLocation.lng}/${shop.latitude},${shop.longitude}`;
    window.open(googleMapsUrl, '_blank');
  } catch (error) {
    const googleMapsUrl = `https://www.google.com/maps/search/?api=1&query=${shop.latitude},${shop.longitude}`;
    window.open(googleMapsUrl, '_blank');
  }
}

function initMap() {
  map = new google.maps.Map(document.getElementById('map'), {
    center: cities.hakata,
    zoom: 15
  });

  directionsService = new google.maps.DirectionsService();

  // 現在地取得ボタンのイベントリスナー
  document.getElementById('getCurrentLocationBtn').addEventListener('click', showCurrentLocation);

  // 店舗マーカーの作成（ここが重要！）
  shops.forEach(shop => {
    const lat = parseFloat(shop.latitude);
    const lng = parseFloat(shop.longitude);

    const marker = new google.maps.Marker({
      position: { lat: lat, lng: lng },
      map: map,
      title: shop.name
    });

    const infoWindow = new google.maps.InfoWindow({
      content: `
        <div class="d-flex flex-column">
          <h5 class="mb-2">${shop.name}</h5>
          <p class="mb-2">評価: ${shop.rating || '評価なし'}</p>
          <div class="text-end">
            <a href="/shops/${shop.id}" class="btn btn-primary btn-sm me-2">
              詳細
            </a>
            <button onclick="navigateToShop({latitude: '${shop.latitude}', longitude: '${shop.longitude}', name: '${shop.name}'})" 
                    class="btn btn-success btn-sm">
              ここに行く
            </button>
          </div>
        </div>`
    });

    marker.addListener('click', function() {
      infoWindow.open(map, marker);
    });
  });

  // 駅選択のイベントリスナー
  document.getElementById('citySelect').addEventListener('change', function() {
    const selectedCity = this.value;
    const city = cities[selectedCity];
    if (city) {
      map.setCenter(city);
      map.setZoom(city.zoom);
    }
  });
}
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['MAPS_API_KEY'] %>&callback=initMap" async defer></script>

<meta name="apple-mobile-web-app-capable" content="yes">
